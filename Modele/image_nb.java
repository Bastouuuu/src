/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package Modele;

public class image_nb {
  public static void init_file(File_nb f) {
    image_nbJNI.init_file(File_nb.getCPtr(f), f);
  }

  public static int file_est_vide(File_nb f) {
    return image_nbJNI.file_est_vide(File_nb.getCPtr(f), f);
  }

  public static void enfiler(File_nb f, String inode, nb_occ histo, int total) {
    image_nbJNI.enfiler(File_nb.getCPtr(f), f, inode, nb_occ.getCPtr(histo), histo, total);
  }

  public static void defiler(File_nb f, String inode, nb_occ histo) {
    image_nbJNI.defiler(File_nb.getCPtr(f), f, inode, nb_occ.getCPtr(histo), histo);
  }

  public static void affiche_file(File_nb f) {
    image_nbJNI.affiche_file(File_nb.getCPtr(f), f);
  }

  public static void init_Arbre_nb(SWIGTYPE_p_p_etCel_Arbre_nb a) {
    image_nbJNI.init_Arbre_nb(SWIGTYPE_p_p_etCel_Arbre_nb.getCPtr(a));
  }

  public static void affiche_Arbre_nb(Cellule_Arbre_nb a, String aff_arbre) {
    image_nbJNI.affiche_Arbre_nb(Cellule_Arbre_nb.getCPtr(a), a, aff_arbre);
  }

  public static int Arbre_nb_vide(Cellule_Arbre_nb a) {
    return image_nbJNI.Arbre_nb_vide(Cellule_Arbre_nb.getCPtr(a), a);
  }

  public static Cellule_Arbre_nb ajout_ds_Arbre_nb_croissant(Cellule_Arbre_nb a, float element_valeur, String element_nom) {
    long cPtr = image_nbJNI.ajout_ds_Arbre_nb_croissant(Cellule_Arbre_nb.getCPtr(a), a, element_valeur, element_nom);
    return (cPtr == 0) ? null : new Cellule_Arbre_nb(cPtr, false);
  }

  public static Cellule_Arbre_nb ajout_ds_Arbre_nb_decroissant(Cellule_Arbre_nb a, float element_valeur, String element_nom) {
    long cPtr = image_nbJNI.ajout_ds_Arbre_nb_decroissant(Cellule_Arbre_nb.getCPtr(a), a, element_valeur, element_nom);
    return (cPtr == 0) ? null : new Cellule_Arbre_nb(cPtr, false);
  }

  public static Cellule_Arbre_nb ajout_si_vide(float el_valeur, String el_nom) {
    long cPtr = image_nbJNI.ajout_si_vide(el_valeur, el_nom);
    return (cPtr == 0) ? null : new Cellule_Arbre_nb(cPtr, false);
  }

  public static void enlever_max_de_Arbre_nb(SWIGTYPE_p_p_etCel_Arbre_nb a, SWIGTYPE_p_float val_dep) {
    image_nbJNI.enlever_max_de_Arbre_nb(SWIGTYPE_p_p_etCel_Arbre_nb.getCPtr(a), SWIGTYPE_p_float.getCPtr(val_dep));
  }

  public static void recup_max_arbre(Cellule_Arbre_nb a, String nom_du_fichier) {
    image_nbJNI.recup_max_arbre(Cellule_Arbre_nb.getCPtr(a), a, nom_du_fichier);
  }

  public static String affiche_res_niveau(Cellule_Arbre_nb a, int verif) {
    return image_nbJNI.affiche_res_niveau(Cellule_Arbre_nb.getCPtr(a), a, verif);
  }

  public static float calcul_pourcentage(int valeur, int total) {
    return image_nbJNI.calcul_pourcentage(valeur, total);
  }

  public static void recup_nom_fic_a_indexer(String chemin) {
    image_nbJNI.recup_nom_fic_a_indexer(chemin);
  }

  public static void get_inode_fichier_encours(String nom_du_fichier_avec_chemin, String inode_du_fichier) {
    image_nbJNI.get_inode_fichier_encours(nom_du_fichier_avec_chemin, inode_du_fichier);
  }

  public static void ecrire_liste_base_image_nb(String inode_du_fichier, String nom_du_fichier) {
    image_nbJNI.ecrire_liste_base_image_nb(inode_du_fichier, nom_du_fichier);
  }

  public static void enlever_entree(String chaine) {
    image_nbJNI.enlever_entree(chaine);
  }

  public static void indexation_une_image(String nom_du_fichier_avec_chemin, String inode_du_fichier, nb_occ tableau, SWIGTYPE_p_int nb_pixel_total) {
    image_nbJNI.indexation_une_image(nom_du_fichier_avec_chemin, inode_du_fichier, nb_occ.getCPtr(tableau), tableau, SWIGTYPE_p_int.getCPtr(nb_pixel_total));
  }

  public static void indexation_image_nb() {
    image_nbJNI.indexation_image_nb();
  }

  public static void recup_nom_fic_via_inode(String inode_du_fichier, String nom_du_fichier) {
    image_nbJNI.recup_nom_fic_via_inode(inode_du_fichier, nom_du_fichier);
  }

  public static String txt_to_bmp(String txt) {
    return image_nbJNI.txt_to_bmp(txt);
  }

  public static String bmp_to_txt(String bmp) {
    return image_nbJNI.bmp_to_txt(bmp);
  }

  public static String affiche_res_similarite(Cellule_Arbre_nb a) {
    return image_nbJNI.affiche_res_similarite(Cellule_Arbre_nb.getCPtr(a), a);
  }

  public static int verif_format(String chaine) {
    return image_nbJNI.verif_format(chaine);
  }

  public static String recherche_similarite_image_nb(String nom_fic) {
    return image_nbJNI.recherche_similarite_image_nb(nom_fic);
  }

  public static void image_panel() {
    image_nbJNI.image_panel();
  }

  public static String recherche_niveau_image_nb(int niveau) {
    return image_nbJNI.recherche_niveau_image_nb(niveau);
  }

  public static int verif_intervalle(int nombre) {
    return image_nbJNI.verif_intervalle(nombre);
  }

  public static void fic_descripteurs(String nom, String inode) {
    image_nbJNI.fic_descripteurs(nom, inode);
  }

  public static void fic_liste_desc(String nom, String inode) {
    image_nbJNI.fic_liste_desc(nom, inode);
  }

  public static void open_image_c() {
    image_nbJNI.open_image_c();
  }

  public static void quantification_im_c(SWIGTYPE_p_p_int mat_origin, int l, int c, int nb_c, int nb_poids_fort, String chemin_desc) {
    image_nbJNI.quantification_im_c(SWIGTYPE_p_p_int.getCPtr(mat_origin), l, c, nb_c, nb_poids_fort, chemin_desc);
  }

  public static int threeToOne(int n, int r, int g, int b) {
    return image_nbJNI.threeToOne(n, r, g, b);
  }

  public static void decompo_binaire(SWIGTYPE_p_int tab_final, int nb_p_fort, int composante) {
    image_nbJNI.decompo_binaire(SWIGTYPE_p_int.getCPtr(tab_final), nb_p_fort, composante);
  }

  public static int binaryToDeci(SWIGTYPE_p_int tab_final) {
    return image_nbJNI.binaryToDeci(SWIGTYPE_p_int.getCPtr(tab_final));
  }

  public static void histogramme(SWIGTYPE_p_p_int q_mat, int l, int c, String chemin_desc) {
    image_nbJNI.histogramme(SWIGTYPE_p_p_int.getCPtr(q_mat), l, c, chemin_desc);
  }

  public static void init_Arbre_c(SWIGTYPE_p_p_etCel_Arbre_c a) {
    image_nbJNI.init_Arbre_c(SWIGTYPE_p_p_etCel_Arbre_c.getCPtr(a));
  }

  public static void affiche_Arbre_c(Cellule_Arbre_c a, String aff_arbre) {
    image_nbJNI.affiche_Arbre_c(Cellule_Arbre_c.getCPtr(a), a, aff_arbre);
  }

  public static int Arbre_c_vide(Cellule_Arbre_c a) {
    return image_nbJNI.Arbre_c_vide(Cellule_Arbre_c.getCPtr(a), a);
  }

  public static Cellule_Arbre_c ajout_ds_Arbre_c_croissant(Cellule_Arbre_c a, float element_valeur, String element_nom) {
    long cPtr = image_nbJNI.ajout_ds_Arbre_c_croissant(Cellule_Arbre_c.getCPtr(a), a, element_valeur, element_nom);
    return (cPtr == 0) ? null : new Cellule_Arbre_c(cPtr, false);
  }

  public static Cellule_Arbre_c ajout_ds_Arbre_c_decroissant(Cellule_Arbre_c a, float element_valeur, String element_nom) {
    long cPtr = image_nbJNI.ajout_ds_Arbre_c_decroissant(Cellule_Arbre_c.getCPtr(a), a, element_valeur, element_nom);
    return (cPtr == 0) ? null : new Cellule_Arbre_c(cPtr, false);
  }

  public static Cellule_Arbre_c ajout_si_vide_c(float el_valeur, String el_nom) {
    long cPtr = image_nbJNI.ajout_si_vide_c(el_valeur, el_nom);
    return (cPtr == 0) ? null : new Cellule_Arbre_c(cPtr, false);
  }

  public static void enlever_max_de_Arbre_c(SWIGTYPE_p_p_etCel_Arbre_c a, SWIGTYPE_p_float val_dep) {
    image_nbJNI.enlever_max_de_Arbre_c(SWIGTYPE_p_p_etCel_Arbre_c.getCPtr(a), SWIGTYPE_p_float.getCPtr(val_dep));
  }

  public static void recup_max_arbre_c(Cellule_Arbre_c a, String nom_du_fichier) {
    image_nbJNI.recup_max_arbre_c(Cellule_Arbre_c.getCPtr(a), a, nom_du_fichier);
  }

  public static String affiche_res_similarite_rgb(Cellule_Arbre_c a) {
    return image_nbJNI.affiche_res_similarite_rgb(Cellule_Arbre_c.getCPtr(a), a);
  }

  public static int verif_format_rgb(String chaine) {
    return image_nbJNI.verif_format_rgb(chaine);
  }

  public static void recup_nom_fic_via_inode_rgb(String inode_du_fichier, String nom_du_fichier) {
    image_nbJNI.recup_nom_fic_via_inode_rgb(inode_du_fichier, nom_du_fichier);
  }

  public static String jpg_to_txt(String jpg) {
    return image_nbJNI.jpg_to_txt(jpg);
  }

  public static String txt_to_jpg(String txt) {
    return image_nbJNI.txt_to_jpg(txt);
  }

  public static String recherche_similarite_image_couleurs(String nom_fic_rech) {
    return image_nbJNI.recherche_similarite_image_couleurs(nom_fic_rech);
  }

  public static void indexation_une_image_rgb(String nom_du_fichier_avec_chemin, String inode_du_fichier, HISTO tableau, SWIGTYPE_p_float tableau_p, SWIGTYPE_p_int nb_pixel_total) {
    image_nbJNI.indexation_une_image_rgb(nom_du_fichier_avec_chemin, inode_du_fichier, HISTO.getCPtr(tableau), tableau, SWIGTYPE_p_float.getCPtr(tableau_p), SWIGTYPE_p_int.getCPtr(nb_pixel_total));
  }

  public static float similarite_fics(HISTO tab, SWIGTYPE_p_float tab_p, SWIGTYPE_p_int desc_nb, SWIGTYPE_p_float desc_pourc) {
    return image_nbJNI.similarite_fics(HISTO.getCPtr(tab), tab, SWIGTYPE_p_float.getCPtr(tab_p), SWIGTYPE_p_int.getCPtr(desc_nb), SWIGTYPE_p_float.getCPtr(desc_pourc));
  }

}
